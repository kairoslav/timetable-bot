from datetime import datetime
import json

import pytz
from aiogram.types import Message, CallbackQuery

from keyboards.inline.chose_day_keyboard import chose_day_keyboard
from loader import dp

short_day_name = {
    "–ü–Ω": "Monday",
    "–í—Ç": "Tuesday",
    "–°—Ä": "Wednesday",
    "–ß—Ç": "Thursday",
    "–ü—Ç": "Friday",
    "–°–±": "Saturday",
    "–í—Å": "Sunday"
}

day_name = {
    0: "Monday",
    1: "Tuesday",
    2: "Wednesday",
    3: "Thursday",
    4: "Friday",
    5: "Saturday",
    6: "Sunday"
}


@dp.message_handler(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å")
async def chose_day(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                         reply_markup=chose_day_keyboard)


@dp.callback_query_handler(text="cancel")
async def cancel_day_chose(call: CallbackQuery):
    await call.answer("–û—Ç–º–µ–Ω–∞", show_alert=True)
    await call.message.edit_reply_markup()


@dp.callback_query_handler(state="*")
async def chose_day(call: CallbackQuery):
    await call.answer(cache_time=60)
    chosen_day = call.data
    print(chosen_day)
    with open("data/timetable.json", "r", encoding='utf-8') as f:
        timetable = json.load(f)
        print(timetable)
        for day_of_week in timetable:
            if day_of_week.get("day") == short_day_name.get(chosen_day):
                today_classes = day_of_week.get("classes")
                all_today_classes = ""
                for class_ in today_classes:
                    all_today_classes += f"{class_.get('name')} c {class_.get('start_time')} –¥–æ {class_.get('end_time')}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {class_.get('place')}\n"
        await call.message.answer(text=all_today_classes)
        await call.message.edit_reply_markup()



@dp.message_handler(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def today_timetable(message: Message):
    with open("data/timetable.json", "r", encoding='utf-8') as f:
        timetable = json.load(f)
        today_date = datetime.now(pytz.timezone('Europe/Moscow'))
        day, hour, minute = day_name.get(today_date.weekday()), today_date.hour, today_date.minute
        hour_minute = str(hour) + ":" + str(minute)

        print(timetable)
        for day_of_week in timetable:
            if day_of_week.get("day") == day:
                today_classes = day_of_week.get("classes")
                all_today_classes = ""
                for class_ in today_classes:
                    all_today_classes += f"{class_.get('name')} c {class_.get('start_time')} " \
                                         f"–¥–æ {class_.get('end_time')}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {class_.get('place')}\n "
        if len(all_today_classes) == 0:
            await message.answer("–ü–∞—Ä —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, –∏–¥–∏ –æ—Ç–¥—ã—Ö–∞–π, –±–æ–µ—Ü.")
            return
        await message.answer(text=all_today_classes)


@dp.message_handler(text="–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–∞—Ä–∞?")
async def class_now(message: Message):
    print(message.chat.full_name)
    with open("data/timetable.json", "r", encoding='utf-8') as f:
        timetable = json.load(f)
    today_date = datetime.now(pytz.timezone('Europe/Moscow'))
    day, hour, minute = day_name.get(today_date.weekday()), today_date.hour, today_date.minute
    if minute // 10 == 0:
        minute = "0" + str(minute)
    if hour // 10 == 0:
        hour = "0" + str(hour)
    hour_minute = str(hour) + ":" + str(minute)
    print(hour_minute)
    print(timetable)
    for day_of_week in timetable:
        if day_of_week.get("day") == day:
            today_classes = day_of_week.get("classes")
            if len(today_classes) == 0:
                await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç.")
            for class_index, class_ in enumerate(today_classes):
                # –ø–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                if today_classes[len(today_classes) - 1].get("end_time") <= hour_minute:
                    await message.answer(text="–ü–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç! –ü–æ—Ä–∞ –ø–∏—Ç—å –ø–∏–≤–æ üç∫!")
                    return
                # –ü–∞—Ä–∞ –∏–¥—ë—Ç —Å–µ–π—á–∞—Å
                elif class_.get("start_time") <= hour_minute <= class_.get("end_time"):
                    await message.answer(text=f"–°–µ–π—á–∞—Å {class_.get('name')} –≤ {class_.get('place')}, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {class_.get('end_time')}")
                # –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
                elif class_.get("end_time") <= hour_minute <= today_classes[class_index + 1].get("start_time"):
                    await message.answer(text=f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤, —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ {today_classes[class_index + 1].get('name')}, "
                                              f"–Ω–∞—á–∞–ª–æ –≤ {today_classes[class_index + 1].get('start_time')}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {class_.get('place')}")
                # –ø–∞—Ä—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏—Å—å
                elif hour_minute < today_classes[0].get("start_time"):
                    await message.answer(text=f"–ü–∞—Ä—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å, —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ {today_classes[0].get('name')} –≤ {today_classes[0].get('start_time')}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {today_classes[0].get('place')}")
                    return
            print(today_classes)
    # await message.answer()
